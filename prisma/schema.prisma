// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  username       String          @id @db.VarChar(100)
  password       String          @db.VarChar(100)
  name           String          @db.VarChar(100)
  token          String?         @db.VarChar(100)
  email          String?         @db.VarChar(200)
  phone          String?         @db.VarChar(20)
  status         Boolean?        @db.TinyInt
  specialist     String?         @db.VarChar(100)
  poliName       String?         @db.VarChar(100)
  role           String          @db.VarChar(20)
  polyclinics    Polyclinic[]
  patients       Patient[]
  drugs          Drug[]
  transactions   Transaction[]
  medicalRecords MedicalRecord[]

  @@map("users")
}

model Polyclinic {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(100)
  floor    String @db.VarChar(100)
  username String @db.VarChar(100)
  user     User   @relation(fields: [username], references: [username])

  @@map("polyclinics")
}

model Patient {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(100)
  gender             String               @db.VarChar(20)
  age                Int
  noRm               String               @unique @db.VarChar(20)
  birth              DateTime             @db.Date()
  email              String?              @db.VarChar(200)
  phone              String?              @db.VarChar(20)
  address            String?              @db.VarChar(225)
  poly               String               @db.VarChar(20)
  username           String               @db.VarChar(100)
  user               User                 @relation(fields: [username], references: [username])
  medicalRecord      MedicalRecord[]
  printMedicalRecord PrintMedicalRecord[]

  @@map("patients")
}

model MedicalRecord {
  id           Int                 @id @default(autoincrement())
  problem      String              @db.VarChar(100)
  diagnosis    String              @db.VarChar(200)
  note         String?             @db.VarChar(255)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  transaction  Transaction?
  noRm         String              @db.VarChar(20)
  transactions MedicalTransaction?
  username     String              @db.VarChar(100)
  user         User                @relation(fields: [username], references: [username])
  patientId    Int
  patient      Patient             @relation(fields: [patientId], references: [id])

  @@map("medical_records")
}

model PrintMedicalRecord {
  id               Int      @id @default(autoincrement())
  problem          String   @db.VarChar(100)
  diagnosis        String   @db.VarChar(200)
  note             String?  @db.VarChar(255)
  createdAt        DateTime @default(now())
  noRm             String   @db.VarChar(20)
  doctorName       String   @db.VarChar(100)
  doctorEmail      String?  @db.VarChar(200)
  doctorPhone      String?  @db.VarChar(20)
  doctorStatus     Boolean? @db.TinyInt
  doctorSpecialist String   @db.VarChar(100)
  doctorPolyName   String?  @db.VarChar(100)
  patientId        Int
  patient          Patient  @relation(fields: [patientId], references: [id])

  @@map("printMedicalRecords")
}

model Drug {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  price       Int
  description String? @db.VarChar(225)
  username    String  @db.VarChar(100)
  user        User    @relation(fields: [username], references: [username])

  @@map("drugs")
}

model DrugItem {
  id             Int  @id @default(autoincrement())
  drugSelectedId Int?
  // medical_record_id Int?
  // medical_record    MedicalRecord? @relation(fields: [medical_record_id], references: [id])

  @@map("drugItems")
}

model Transaction {
  id                Int                 @id @default(autoincrement())
  total_price       Int
  medical_record    MedicalRecord?      @relation(fields: [medical_record_id], references: [id])
  medical_record_id Int?                @unique
  medicalRecords    MedicalTransaction?
  username          String              @db.VarChar(100)
  user              User                @relation(fields: [username], references: [username])

  @@map("transactions")
}

model MedicalTransaction {
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId Int           @unique
  transaction     Transaction   @relation(fields: [transactionId], references: [id])
  transactionId   Int           @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("medicalTransaction")
}
